/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.0.1-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.google.protobuf.Message;
import com.google.protobuf.ProtocolMessageEnum;
import com.googlecode.protobuf.format.JsonFormat;
import io.swagger.annotations.*;
import org.openapitools.model.*;
import org.openbase.bco.registry.remote.Registries;
import org.openbase.bco.registry.template.lib.TemplateRegistry;
import org.openbase.jul.exception.CouldNotPerformException;
import org.openbase.jul.exception.NotAvailableException;
import org.openbase.type.domotic.service.ServiceTemplateType;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import javax.validation.Valid;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2019-06-17T16:47:17.146638+02:00[Europe/Berlin]")

@Validated
@Api(value = "registry", description = "the registry API")
public interface RegistryApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    @ApiOperation(value = "", nickname = "registryTemplateContainsActivityTemplateByIdPost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsActivityTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsActivityTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        try {
            return ResponseEntity.ok(Registries.getTemplateRegistry(true).containsActivityTemplateById(body));
        } catch (CouldNotPerformException | InterruptedException ex) {
            return ResponseEntity.status(500).build();
        }
    }


    @ApiOperation(value = "", nickname = "registryTemplateContainsActivityTemplatePost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsActivityTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsActivityTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseActivityTemplate openbaseActivityTemplate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateContainsServiceTemplateByIdPost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsServiceTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsServiceTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateContainsServiceTemplatePost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsServiceTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsServiceTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseServiceTemplate openbaseServiceTemplate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateContainsUnitTemplateByIdPost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsUnitTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsUnitTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateContainsUnitTemplatePost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/containsUnitTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateContainsUnitTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseUnitTemplate openbaseUnitTemplate) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetActivityTemplateByIdPost", notes = "", response = OpenbaseActivityTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseActivityTemplate.class)})
    @RequestMapping(value = "/registry/template/getActivityTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseActivityTemplate> registryTemplateGetActivityTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"description\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetActivityTemplateByTypePost", notes = "", response = OpenbaseActivityTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseActivityTemplate.class)})
    @RequestMapping(value = "/registry/template/getActivityTemplateByType",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseActivityTemplate> registryTemplateGetActivityTemplateByTypePost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"description\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetActivityTemplatesGet", notes = "", response = OpenbaseActivityTemplate.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseActivityTemplate.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getActivityTemplates",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<List<OpenbaseActivityTemplate>> registryTemplateGetActivityTemplatesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"description\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetServiceStateClassNamePost", notes = "", response = String.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = String.class)})
    @RequestMapping(value = "/registry/template/getServiceStateClassName",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<String> registryTemplateGetServiceStateClassNamePost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetServiceTemplateByIdPost", notes = "", response = OpenbaseServiceTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplate.class)})
    @RequestMapping(value = "/registry/template/getServiceTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseServiceTemplate> registryTemplateGetServiceTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        /*getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });*/
        try {
            return ResponseEntity.ok(invokeMethod(body, OpenbaseServiceTemplate.class));
        } catch (CouldNotPerformException e) {
            System.out.println("Error: " + e);
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetServiceTemplateByTypePost", notes = "", response = OpenbaseServiceTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplate.class)})
    @RequestMapping(value = "/registry/template/getServiceTemplateByType",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseServiceTemplate> registryTemplateGetServiceTemplateByTypePost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        /*getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });*/

        final JsonFormat jsonFormat = new JsonFormat();
        final ObjectMapper objectMapper = new ObjectMapper();

        try {
            System.out.println("Retrieve service type for value " + body);
            OpenbaseServiceTemplateServiceType openbaseServiceTemplateServiceType = OpenbaseServiceTemplateServiceType.fromValue(body);
            System.out.println("Retrieve service type for value " + body + ", " + openbaseServiceTemplateServiceType);
            ServiceTemplateType.ServiceTemplate.ServiceType serviceType = ServiceTemplateType.ServiceTemplate.ServiceType.valueOf(openbaseServiceTemplateServiceType.toString());
            System.out.println("ServiceType " + serviceType.name());
            ServiceTemplateType.ServiceTemplate serviceTemplateByType = Registries.getTemplateRegistry(true).getServiceTemplateByType(serviceType);
            System.out.println("Retrieved serviceTemplate: " + serviceTemplateByType);
            OpenbaseServiceTemplate openbaseServiceTemplate = objectMapper.readValue(jsonFormat.printToString(serviceTemplateByType), OpenbaseServiceTemplate.class);
            return ResponseEntity.ok(openbaseServiceTemplate);
        } catch (Exception ex) {
            System.out.println("FAIL: " + ex);
            return ResponseEntity.status(500).build();
        }
    }


    @ApiOperation(value = "", nickname = "registryTemplateGetServiceTemplatesGet", notes = "", response = OpenbaseServiceTemplate.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplate.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getServiceTemplates",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<List<OpenbaseServiceTemplate>> registryTemplateGetServiceTemplatesGet() {
        /*getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });*/

        System.out.println("Recevied service template request!");
        final ObjectMapper objectMapper = new ObjectMapper().setDefaultPropertyInclusion(JsonInclude.Include.NON_NULL);
        final JsonFormat jsonFormat = new JsonFormat();
        try {
            final List<OpenbaseServiceTemplate> openbaseServiceTemplateList = new ArrayList<>();
            for (ServiceTemplateType.ServiceTemplate serviceTemplate : Registries.getTemplateRegistry(true).getServiceTemplates()) {
                System.out.println("Convert " + serviceTemplate.getId() + ": " + jsonFormat.printToString(serviceTemplate));
                openbaseServiceTemplateList.add(objectMapper.readValue(jsonFormat.printToString(serviceTemplate), OpenbaseServiceTemplate.class));
                System.out.println("Converted " + serviceTemplate.getId() + ": " + objectMapper.writeValueAsString(objectMapper.readValue(jsonFormat.printToString(serviceTemplate), OpenbaseServiceTemplate.class)));
            }
            System.out.println("List: " + openbaseServiceTemplateList.size());
            return ResponseEntity.status(200).body(openbaseServiceTemplateList);
            //return ResponseEntity.ok(openbaseServiceTemplateList);
        } catch (Exception ex) {
            System.out.println("Fail: " + ex);
            return ResponseEntity.status(500).build();
        }
    }


    @ApiOperation(value = "", nickname = "registryTemplateGetSubServiceTypesPost", notes = "", response = OpenbaseServiceTemplateServiceType.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplateServiceType.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getSubServiceTypes",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<List<OpenbaseServiceTemplateServiceType>> registryTemplateGetSubServiceTypesPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetSubUnitTypesPost", notes = "", response = OpenbaseUnitTemplateUnitType.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplateUnitType.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getSubUnitTypes",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<List<OpenbaseUnitTemplateUnitType>> registryTemplateGetSubUnitTypesPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetSuperServiceTypesPost", notes = "", response = OpenbaseServiceTemplateServiceType.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplateServiceType.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getSuperServiceTypes",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<List<OpenbaseServiceTemplateServiceType>> registryTemplateGetSuperServiceTypesPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetSuperUnitTypesPost", notes = "", response = OpenbaseUnitTemplateUnitType.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplateUnitType.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getSuperUnitTypes",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<List<OpenbaseUnitTemplateUnitType>> registryTemplateGetSuperUnitTypesPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "null");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetUnitTemplateByIdPost", notes = "", response = OpenbaseUnitTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplate.class)})
    @RequestMapping(value = "/registry/template/getUnitTemplateById",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseUnitTemplate> registryTemplateGetUnitTemplateByIdPost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"service_description\" : [ {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  }, {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  } ],  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetUnitTemplateByTypePost", notes = "", response = OpenbaseUnitTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplate.class)})
    @RequestMapping(value = "/registry/template/getUnitTemplateByType",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseUnitTemplate> registryTemplateGetUnitTemplateByTypePost(@ApiParam(value = "", required = true) @Valid @RequestBody String body) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"service_description\" : [ {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  }, {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  } ],  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateGetUnitTemplatesGet", notes = "", response = OpenbaseUnitTemplate.class, responseContainer = "List", tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplate.class, responseContainer = "List")})
    @RequestMapping(value = "/registry/template/getUnitTemplates",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<List<OpenbaseUnitTemplate>> registryTemplateGetUnitTemplatesGet() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"service_description\" : [ {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  }, {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  } ],  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsActivityTemplateRegistryConsistentGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isActivityTemplateRegistryConsistent",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsActivityTemplateRegistryConsistentGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsActivityTemplateRegistryReadOnlyGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isActivityTemplateRegistryReadOnly",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsActivityTemplateRegistryReadOnlyGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsServiceTemplateRegistryConsistentGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isServiceTemplateRegistryConsistent",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsServiceTemplateRegistryConsistentGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsServiceTemplateRegistryReadOnlyGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isServiceTemplateRegistryReadOnly",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsServiceTemplateRegistryReadOnlyGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsUnitTemplateRegistryConsistentGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isUnitTemplateRegistryConsistent",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsUnitTemplateRegistryConsistentGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateIsUnitTemplateRegistryReadOnlyGet", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/isUnitTemplateRegistryReadOnly",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<Boolean> registryTemplateIsUnitTemplateRegistryReadOnlyGet() {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateActivityTemplatePost", notes = "", response = OpenbaseActivityTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseActivityTemplate.class)})
    @RequestMapping(value = "/registry/template/updateActivityTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseActivityTemplate> registryTemplateUpdateActivityTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseActivityTemplate openbaseActivityTemplate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"description\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateActivityTemplateVerifiedPost", notes = "", response = OpenbaseTransactionValue.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseTransactionValue.class)})
    @RequestMapping(value = "/registry/template/updateActivityTemplateVerified",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseTransactionValue> registryTemplateUpdateActivityTemplateVerifiedPost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseTransactionValue openbaseTransactionValue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"transaction_id\" : 0,  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateServiceTemplatePost", notes = "", response = OpenbaseServiceTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseServiceTemplate.class)})
    @RequestMapping(value = "/registry/template/updateServiceTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseServiceTemplate> registryTemplateUpdateServiceTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseServiceTemplate openbaseServiceTemplate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateServiceTemplateVerifiedPost", notes = "", response = OpenbaseTransactionValue.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseTransactionValue.class)})
    @RequestMapping(value = "/registry/template/updateServiceTemplateVerified",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseTransactionValue> registryTemplateUpdateServiceTemplateVerifiedPost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseTransactionValue openbaseTransactionValue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"transaction_id\" : 0,  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateUnitTemplatePost", notes = "", response = OpenbaseUnitTemplate.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseUnitTemplate.class)})
    @RequestMapping(value = "/registry/template/updateUnitTemplate",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseUnitTemplate> registryTemplateUpdateUnitTemplatePost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseUnitTemplate openbaseUnitTemplate) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"meta_config\" : {    \"entry\" : [ {      \"value\" : \"value\",      \"key\" : \"key\"    }, {      \"value\" : \"value\",      \"key\" : \"key\"    } ]  },  \"service_description\" : [ {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  }, {    \"meta_config\" : {      \"entry\" : [ {        \"value\" : \"value\",        \"key\" : \"key\"      }, {        \"value\" : \"value\",        \"key\" : \"key\"      } ]    },    \"service_template_id\" : \"service_template_id\",    \"aggregated\" : true  } ],  \"super_type\" : [ null, null ],  \"id\" : \"id\",  \"label\" : {    \"entry\" : [ {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    }, {      \"value\" : [ \"value\", \"value\" ],      \"key\" : \"key\"    } ]  }}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateUpdateUnitTemplateVerifiedPost", notes = "", response = OpenbaseTransactionValue.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = OpenbaseTransactionValue.class)})
    @RequestMapping(value = "/registry/template/updateUnitTemplateVerified",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<OpenbaseTransactionValue> registryTemplateUpdateUnitTemplateVerifiedPost(@ApiParam(value = "", required = true) @Valid @RequestBody OpenbaseTransactionValue openbaseTransactionValue) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType : MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    ApiUtil.setExampleResponse(request, "application/json", "{  \"transaction_id\" : 0,  \"value\" : \"value\"}");
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    @ApiOperation(value = "", nickname = "registryTemplateValidateServicePatternSupportPost", notes = "", response = Boolean.class, tags = {})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "success", response = Boolean.class)})
    @RequestMapping(value = "/registry/template/validateServicePatternSupport",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<Boolean> registryTemplateValidateServicePatternSupportPost(@ApiParam(value = "", required = true) @Valid @RequestBody InlineObject inlineObject) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    static final ObjectMapper OBJECT_MAPPER = new ObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);
    static final JsonFormat JSON_FORMAT = new JsonFormat();

    default <T> T invokeMethod(final Object parameter, final Class<T> returnClass) throws CouldNotPerformException {
        StackTraceElement[] stackTrace = Thread.currentThread().getStackTrace();
        String methodName = stackTrace[2].getMethodName();

        for (int i = 0; i < stackTrace.length; i++) {
            System.out.println(i + ": " + stackTrace[i].getMethodName());
        }
        System.out.println("Methodname1: " + methodName);

        // remove the post and get at the end of the method name as generated by the openAPI spec
        // do not remove it in general because the methods themselves can contain these terms
        if (methodName.endsWith("Post")) {
            methodName = methodName.substring(0, methodName.length() - 4);
        } else if (methodName.endsWith("Get")) {
            methodName = methodName.substring(0, methodName.length() - 3);
        }
        //TODO: make independent of registry
        methodName = methodName.replace("registryTemplate", "");
        methodName = methodName.substring(0, 1).toLowerCase() + methodName.substring(1);
        System.out.println("Methodname2: " + methodName);

        //TODO: make independent of registry
        Method method = null;
        for (Method m : TemplateRegistry.class.getMethods()) {
            if (m.getName().equals(methodName)) {
                method = m;
            }
        }

        if (method == null) {
            throw new NotAvailableException("method[" + methodName + "]");
        }

        if(method.getParameterTypes().length > 1) {
            //TODO: parse several parameters
            return null;
        } else {
            //TODO parse parameter correctly

            Object result = null;
            try {
                result = method.invoke(Registries.getTemplateRegistry(true), parameter);
                return OBJECT_MAPPER.readValue(JSON_FORMAT.printToString((Message) result), returnClass);
            } catch (IllegalAccessException | IOException | InvocationTargetException | InterruptedException e) {
                throw new CouldNotPerformException("ABC", e);
            }
        }
    }

    default Object convertParameter(final Object actualParameter, final Class expectedParameterClass) throws CouldNotPerformException{
        if (Message.class.isAssignableFrom(expectedParameterClass)) {
            Message.Builder newBuilder = null;
            try {
                newBuilder = (Message.Builder) expectedParameterClass.getMethod("newBuilder").invoke(null);
                JSON_FORMAT.merge(OBJECT_MAPPER.writeValueAsString(actualParameter), newBuilder));
            } catch (IllegalAccessException | InvocationTargetException | NoSuchMethodException | JsonProcessingException e) {


            }

                    return newBuilder.build();
        } else if(ProtocolMessageEnum.class.isAssignableFrom(expectedParameterClass)) {
            if(!actualParameter.equals(String.class)) {
                throw new CouldNotPerformException("Unexpected parameter class["+actualParameter.getClass().getSimpleName()+"] for enum. Should be String.class");
            }
            return expectedParameterClass.getMethod("valueOf", String.class).invoke(null, expectedParameterClass);
        }

        return actualParameter;
    }
}
